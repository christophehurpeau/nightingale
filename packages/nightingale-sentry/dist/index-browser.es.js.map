{"version":3,"file":"index-browser.es.js","sources":["../src/index.ts"],"sourcesContent":["import type {\n  addBreadcrumb,\n  captureException,\n  captureMessage,\n} from '@sentry/core';\nimport type { User, SeverityLevel } from '@sentry/types';\nimport { Level } from 'nightingale-levels';\nimport type { LogRecord, Handle, Metadata, Handler } from 'nightingale-types';\n\nconst mapToSentryLevel: Record<Level, SeverityLevel> = {\n  [Level.TRACE]: 'debug',\n  [Level.DEBUG]: 'debug',\n  [Level.INFO]: 'info',\n  [Level.NOTICE]: 'log',\n  [Level.WARNING]: 'warning',\n  [Level.ERROR]: 'error',\n  [Level.CRITICAL]: 'fatal',\n  [Level.FATAL]: 'fatal',\n  [Level.EMERGENCY]: 'fatal',\n  // not a level\n  [Level.ALL]: 'error',\n};\n\nexport interface MetadataWithError extends Metadata {\n  error?: Error;\n}\n\nexport interface Options {\n  getUser?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => User | undefined;\n  getTags?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => Record<string, string>;\n  getBreadcrumbCategory?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  getBreadcrumbType?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  shouldSendAsException?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => boolean;\n  shouldSendAsBreadcrumb?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => boolean;\n}\n\nexport interface SentryRequiredMethods {\n  addBreadcrumb: typeof addBreadcrumb;\n  captureException: typeof captureException;\n  captureMessage: typeof captureMessage;\n}\n\nconst createHandler = <S extends SentryRequiredMethods>(\n  Sentry: S,\n  {\n    getUser = () => undefined,\n    getTags = () => ({}),\n    getBreadcrumbCategory = () => undefined,\n    getBreadcrumbType = () => undefined,\n    shouldSendAsException = <T extends Metadata>(record: LogRecord<T>) =>\n      record.metadata?.error !== undefined &&\n      record.metadata.unhandled !== true,\n    shouldSendAsBreadcrumb = <T extends Metadata>(record: LogRecord<T>) =>\n      false,\n  }: Options = {},\n): Handle => {\n  return <T extends MetadataWithError>(record: LogRecord<T>) => {\n    const { key, level, metadata, extra, message } = record;\n\n    if (shouldSendAsException(record)) {\n      const error = metadata?.error || record.message;\n\n      const extraData: Record<string, unknown> = {\n        nightingaleErrorMessage: message,\n        ...metadata,\n        ...extra,\n      };\n      delete extraData.error;\n\n      Sentry.captureException(error, {\n        level: mapToSentryLevel[level] || 'error',\n        user: getUser(record),\n        tags: {\n          loggerKey: key,\n          ...getTags(record),\n        },\n        extra: extraData,\n      });\n    } else if (shouldSendAsBreadcrumb(record)) {\n      Sentry.addBreadcrumb({\n        level: mapToSentryLevel[level] || 'error',\n        category: getBreadcrumbCategory(record),\n        type: getBreadcrumbType(record),\n        message: record.message,\n        data: record.metadata,\n        timestamp: record.datetime.getTime(),\n      });\n    }\n  };\n};\n\nexport class SentryHandler<S extends SentryRequiredMethods> implements Handler {\n  minLevel: Level;\n\n  handle: Handle;\n\n  constructor(Sentry: S, minLevel: Level, options?: Options) {\n    this.minLevel = minLevel;\n    this.handle = createHandler<S>(Sentry, options);\n  }\n}\n"],"names":["mapToSentryLevel","_mapToSentryLevel","Level","TRACE","DEBUG","INFO","NOTICE","WARNING","ERROR","CRITICAL","FATAL","EMERGENCY","ALL","createHandler","Sentry","_temp","_ref","_ref$getUser","getUser","undefined","_ref$getTags","getTags","_ref$getBreadcrumbCat","getBreadcrumbCategory","_ref$getBreadcrumbTyp","getBreadcrumbType","_ref$shouldSendAsExce","shouldSendAsException","record","_record$metadata","metadata","error","unhandled","_ref$shouldSendAsBrea","shouldSendAsBreadcrumb","key","level","extra","message","extraData","_extends","nightingaleErrorMessage","captureException","user","tags","loggerKey","addBreadcrumb","category","type","data","timestamp","datetime","getTime","SentryHandler","minLevel","options","handle"],"mappings":"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"}