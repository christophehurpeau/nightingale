{"version":3,"file":"index-browsermodern.es.js","sources":["../src/index.ts"],"sourcesContent":["import { Logger, configure, Level } from 'nightingale';\nimport { BrowserConsoleHandler } from 'nightingale-browser-console';\nimport { ReactNativeConsoleHandler } from 'nightingale-react-native-console';\nimport { Platform } from 'react-native';\n\nexport { configure, addConfig, Level } from 'nightingale';\n\nexport const appLogger = new Logger('app');\n\nexport const ReactNativeConsoleHandlerForPlatform:\n  | typeof BrowserConsoleHandler\n  | typeof ReactNativeConsoleHandler =\n  Platform.OS === 'web' ? BrowserConsoleHandler : ReactNativeConsoleHandler;\n\nconfigure(\n  process.env.NODE_ENV === 'production'\n    ? []\n    : [\n        {\n          pattern: /^app(:|$)/,\n          handlers: [new ReactNativeConsoleHandlerForPlatform(Level.DEBUG)],\n          stop: true,\n        },\n        {\n          handlers: [new ReactNativeConsoleHandlerForPlatform(Level.INFO)],\n        },\n      ],\n);\n\nexport function listenReactNativeUnhandledErrors(\n  logger: Logger = new Logger(\n    'nightingale:listenReactNativeUnhandledErrors',\n    'UnhandledErrors',\n  ),\n): void {\n  // Check if Hermes is available and is being used for promises\n  // React Native v0.63 and v0.64 include global.HermesInternal but not 'hasPromise'\n  if (\n    global?.HermesInternal?.hasPromise?.() &&\n    global.HermesInternal.enablePromiseRejectionTracker\n  ) {\n    global.HermesInternal.enablePromiseRejectionTracker({\n      allRejections: true,\n      onUnhandled: (id: number, rejection: Error) => {\n        logger.error(rejection, {\n          unhandled: true,\n          type: 'promiseRejectionTracker',\n          id,\n        });\n      },\n    });\n  } else {\n    throw new Error('Only Hermes is supported.');\n  }\n\n  const globalHander = ErrorUtils.getGlobalHandler();\n\n  ErrorUtils.setGlobalHandler((error: Error, isFatal?: boolean) => {\n    if (isFatal) {\n      logger.fatal(error, { unhandled: true, type: 'globalHandler', isFatal });\n    } else {\n      logger.error(error, { unhandled: true, type: 'globalHandler', isFatal });\n    }\n\n    if (globalHander) {\n      globalHander(error, isFatal);\n    }\n  });\n}\n"],"names":["appLogger","Logger","ReactNativeConsoleHandlerForPlatform","Platform","OS","BrowserConsoleHandler","ReactNativeConsoleHandler","configure","process","env","NODE_ENV","pattern","handlers","Level","DEBUG","stop","INFO","listenReactNativeUnhandledErrors","logger","global","HermesInternal","hasPromise","enablePromiseRejectionTracker","allRejections","onUnhandled","id","rejection","error","unhandled","type","Error","globalHander","ErrorUtils","getGlobalHandler","setGlobalHandler","isFatal","fatal"],"mappings":";;;;;;MAOaA,SAAS,GAAG,IAAIC,MAAM,CAAC,KAAK,EAAC;AAEnC,MAAMC,oCAEuB,GAClCC,QAAQ,CAACC,EAAE,KAAK,KAAK,GAAGC,qBAAqB,GAAGC,0BAAyB;AAE3EC,SAAS,CACPC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjC,EAAE,GACF,CACE;AACEC,EAAAA,OAAO,EAAE,WAAW;EACpBC,QAAQ,EAAE,CAAC,IAAIV,oCAAoC,CAACW,KAAK,CAACC,KAAK,CAAC,CAAC;AACjEC,EAAAA,IAAI,EAAE,IAAA;AACR,CAAC,EACD;EACEH,QAAQ,EAAE,CAAC,IAAIV,oCAAoC,CAACW,KAAK,CAACG,IAAI,CAAC,CAAA;AACjE,CAAC,CAET,CAAC,CAAA;AAEM,SAASC,gCAAgCA,CAC9CC,MAAc,GAAG,IAAIjB,MAAM,CACzB,8CAA8C,EAC9C,iBACF,CAAC,EACK;AACN;AACA;AACA,EAAA,IACEkB,MAAM,EAAEC,cAAc,EAAEC,UAAU,IAAI,IACtCF,MAAM,CAACC,cAAc,CAACE,6BAA6B,EACnD;AACAH,IAAAA,MAAM,CAACC,cAAc,CAACE,6BAA6B,CAAC;AAClDC,MAAAA,aAAa,EAAE,IAAI;AACnBC,MAAAA,WAAW,EAAEA,CAACC,EAAU,EAAEC,SAAgB,KAAK;AAC7CR,QAAAA,MAAM,CAACS,KAAK,CAACD,SAAS,EAAE;AACtBE,UAAAA,SAAS,EAAE,IAAI;AACfC,UAAAA,IAAI,EAAE,yBAAyB;AAC/BJ,UAAAA,EAAAA;AACF,SAAC,CAAC,CAAA;AACJ,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAC,MAAM;AACL,IAAA,MAAM,IAAIK,KAAK,CAAC,2BAA2B,CAAC,CAAA;AAC9C,GAAA;AAEA,EAAA,MAAMC,YAAY,GAAGC,UAAU,CAACC,gBAAgB,EAAE,CAAA;AAElDD,EAAAA,UAAU,CAACE,gBAAgB,CAAC,CAACP,KAAY,EAAEQ,OAAiB,KAAK;AAC/D,IAAA,IAAIA,OAAO,EAAE;AACXjB,MAAAA,MAAM,CAACkB,KAAK,CAACT,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,IAAI;AAAEC,QAAAA,IAAI,EAAE,eAAe;AAAEM,QAAAA,OAAAA;AAAQ,OAAC,CAAC,CAAA;AAC1E,KAAC,MAAM;AACLjB,MAAAA,MAAM,CAACS,KAAK,CAACA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,IAAI;AAAEC,QAAAA,IAAI,EAAE,eAAe;AAAEM,QAAAA,OAAAA;AAAQ,OAAC,CAAC,CAAA;AAC1E,KAAA;AAEA,IAAA,IAAIJ,YAAY,EAAE;AAChBA,MAAAA,YAAY,CAACJ,KAAK,EAAEQ,OAAO,CAAC,CAAA;AAC9B,KAAA;AACF,GAAC,CAAC,CAAA;AACJ;;;;"}