{"version":3,"file":"index-react-native.es.js","sources":["../src/index.ts"],"sourcesContent":["import { BrowserConsoleHandler, Level, Logger, configure } from \"nightingale\";\nimport { ReactNativeConsoleHandler } from \"nightingale-react-native-console\";\nimport { Platform } from \"react-native\";\n\nexport { configure, addConfig, Level } from \"nightingale\";\n\nexport const appLogger = new Logger(\"app\");\n\nexport const ReactNativeConsoleHandlerForPlatform:\n  | typeof BrowserConsoleHandler\n  | typeof ReactNativeConsoleHandler =\n  Platform.OS === \"web\" ? BrowserConsoleHandler : ReactNativeConsoleHandler;\n\nconfigure(\n  process.env.NODE_ENV === \"production\"\n    ? []\n    : [\n        {\n          pattern: /^app(:|$)/,\n          handlers: [new ReactNativeConsoleHandlerForPlatform(Level.DEBUG)],\n          stop: true,\n        },\n        {\n          handlers: [new ReactNativeConsoleHandlerForPlatform(Level.INFO)],\n        },\n      ],\n);\n\nexport function listenReactNativeUnhandledErrors(\n  logger: Logger = new Logger(\n    \"nightingale:listenReactNativeUnhandledErrors\",\n    \"UnhandledErrors\",\n  ),\n): void {\n  // Check if Hermes is available and is being used for promises\n  // React Native v0.63 and v0.64 include global.HermesInternal but not 'hasPromise'\n  if (\n    globalThis.HermesInternal.hasPromise?.() &&\n    globalThis.HermesInternal.enablePromiseRejectionTracker\n  ) {\n    globalThis.HermesInternal.enablePromiseRejectionTracker({\n      allRejections: true,\n      onUnhandled: (id: number, rejection: Error) => {\n        logger.error(rejection, {\n          unhandled: true,\n          type: \"promiseRejectionTracker\",\n          id,\n        });\n      },\n    });\n  } else {\n    throw new Error(\"Only Hermes is supported.\");\n  }\n\n  const globalHandler = ErrorUtils.getGlobalHandler();\n\n  ErrorUtils.setGlobalHandler((error: Error, isFatal?: boolean) => {\n    if (isFatal) {\n      logger.fatal(error, { unhandled: true, type: \"globalHandler\", isFatal });\n    } else {\n      logger.error(error, { unhandled: true, type: \"globalHandler\", isFatal });\n    }\n\n    if (globalHandler) {\n      globalHandler(error, isFatal);\n    }\n  });\n}\n"],"names":[],"mappings":";;;;;AAMO,MAAM,SAAA,GAAY,IAAI,MAAA,CAAO,KAAK;AAElC,MAAM,oCAAA,GAGX,QAAA,CAAS,EAAA,KAAO,KAAA,GAAQ,qBAAA,GAAwB;AAElD,SAAA;AAAA,EACE,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,YAAA,GACrB,EAAC,GACD;AAAA,IACE;AAAA,MACE,OAAA,EAAS,WAAA;AAAA,MACT,UAAU,CAAC,IAAI,oCAAA,CAAqC,KAAA,CAAM,KAAK,CAAC,CAAA;AAAA,MAChE,IAAA,EAAM;AAAA,KACR;AAAA,IACA;AAAA,MACE,UAAU,CAAC,IAAI,oCAAA,CAAqC,KAAA,CAAM,IAAI,CAAC;AAAA;AACjE;AAER,CAAA;AAEO,SAAS,gCAAA,CACd,SAAiB,IAAI,MAAA;AAAA,EACnB,8CAAA;AAAA,EACA;AACF,CAAA,EACM;AAGN,EAAA,IACE,WAAW,cAAA,CAAe,UAAA,IAAa,IACvC,UAAA,CAAW,eAAe,6BAAA,EAC1B;AACA,IAAA,UAAA,CAAW,eAAe,6BAAA,CAA8B;AAAA,MACtD,aAAA,EAAe,IAAA;AAAA,MACf,WAAA,EAAa,CAAC,EAAA,EAAY,SAAA,KAAqB;AAC7C,QAAA,MAAA,CAAO,MAAM,SAAA,EAAW;AAAA,UACtB,SAAA,EAAW,IAAA;AAAA,UACX,IAAA,EAAM,yBAAA;AAAA,UACN;AAAA,SACD,CAAA;AAAA,MACH;AAAA,KACD,CAAA;AAAA,EACH,CAAA,MAAO;AACL,IAAA,MAAM,IAAI,MAAM,2BAA2B,CAAA;AAAA,EAC7C;AAEA,EAAA,MAAM,aAAA,GAAgB,WAAW,gBAAA,EAAiB;AAElD,EAAA,UAAA,CAAW,gBAAA,CAAiB,CAAC,KAAA,EAAc,OAAA,KAAsB;AAC/D,IAAA,IAAI,OAAA,EAAS;AACX,MAAA,MAAA,CAAO,KAAA,CAAM,OAAO,EAAE,SAAA,EAAW,MAAM,IAAA,EAAM,eAAA,EAAiB,SAAS,CAAA;AAAA,IACzE,CAAA,MAAO;AACL,MAAA,MAAA,CAAO,KAAA,CAAM,OAAO,EAAE,SAAA,EAAW,MAAM,IAAA,EAAM,eAAA,EAAiB,SAAS,CAAA;AAAA,IACzE;AAEA,IAAA,IAAI,aAAA,EAAe;AACjB,MAAA,aAAA,CAAc,OAAO,OAAO,CAAA;AAAA,IAC9B;AAAA,EACF,CAAC,CAAA;AACH;;;;"}