{"version":3,"file":"index-node8.es.js","sources":["../src/index.ts"],"sourcesContent":["import ansi, { EscapeCodePair } from 'ansi-styles';\nimport { Styles, Record } from 'nightingale-types';\nimport { styleToHexColor, formatRecordToString } from 'nightingale-formatter';\n\ndeclare module 'ansi-styles' {\n  export const color: {\n    close: string;\n    ansi256: {\n      hex: (hex: string) => string;\n    };\n  };\n}\n\ninterface AnsiStyles {\n  [key: string]: EscapeCodePair | undefined;\n}\n\nconst ansiStyles: AnsiStyles = {\n  black: ansi.black,\n  red: ansi.red,\n  green: ansi.green,\n  yellow: ansi.yellow,\n  blue: ansi.blue,\n  magenta: ansi.magenta,\n  cyan: ansi.cyan,\n  white: ansi.white,\n  gray: ansi.gray,\n\n  bgBlack: ansi.bgBlack,\n  bgRed: ansi.bgRed,\n  bgGreen: ansi.bgGreen,\n  bgYellow: ansi.bgYellow,\n  bgBlue: ansi.bgBlue,\n  bgMagenta: ansi.bgMagenta,\n  bgCyan: ansi.bgCyan,\n  bgWhite: ansi.bgWhite,\n\n  bold: ansi.bold,\n  underline: ansi.underline,\n\n  // http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n  orange: { open: ansi.color.ansi256.hex(styleToHexColor.orange), close: ansi.color.close },\n  'gray-light': {\n    open: ansi.color.ansi256.hex(styleToHexColor['gray-light']),\n    close: ansi.color.close,\n  },\n};\n\nexport function style(styles: Styles, string: string) {\n  if (!styles || !styles.length || !string) {\n    return string;\n  }\n\n  return styles.reduce((string: string, styleName: string) => {\n    const style: EscapeCodePair | undefined = ansiStyles[styleName];\n\n    if (!style) {\n      throw new Error(`Unknown style: ${styleName}`);\n    }\n\n    return style.open + string + style.close;\n  }, string);\n}\n\n/**\n * @param {Object} record\n * @returns {string}\n */\nexport default function format<T>(record: Record<T>) {\n  return formatRecordToString(record, style);\n}\n"],"names":["ansiStyles","ansi","black","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bold","underline","color","ansi256","hex","styleToHexColor","orange","close","style","styles","string","length","reduce","styleName","Error","open","format","record","formatRecordToString"],"mappings":";;;AAiBA,MAAMA,aAAyB;SACtBC,KAAKC,KADiB;OAExBD,KAAKE,GAFmB;SAGtBF,KAAKG,KAHiB;UAIrBH,KAAKI,MAJgB;QAKvBJ,KAAKK,IALkB;WAMpBL,KAAKM,OANe;QAOvBN,KAAKO,IAPkB;SAQtBP,KAAKQ,KARiB;QASvBR,KAAKS,IATkB;WAWpBT,KAAKU,OAXe;SAYtBV,KAAKW,KAZiB;WAapBX,KAAKY,OAbe;YAcnBZ,KAAKa,QAdc;UAerBb,KAAKc,MAfgB;aAgBlBd,KAAKe,SAhBa;UAiBrBf,KAAKgB,MAjBgB;WAkBpBhB,KAAKiB,OAlBe;QAoBvBjB,KAAKkB,IApBkB;aAqBlBlB,KAAKmB,SArBa;;UAwBrB;UAAQnB,KAAKoB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBC,gBAAgBC,MAAvC,CAAR;WAA+DxB,KAAKoB,KAAL,CAAWK;GAxBrD;gBAyBf;UACNzB,KAAKoB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBC,gBAAgB,YAAhB,CAAvB,CADM;WAELvB,KAAKoB,KAAL,CAAWK;;CA3BtB;AA+BA,AAAO,SAASC,KAAT,CAAeC,MAAf,EAA+BC,MAA/B,EAA+C;MAChD,CAACD,MAAD,IAAW,CAACA,OAAOE,MAAnB,IAA6B,CAACD,MAAlC,EAA0C;WACjCA,MAAP;;;SAGKD,OAAOG,MAAP,CAAc,CAACF,MAAD,EAAiBG,SAAjB,KAAuC;UACpDL,QAAoC3B,WAAWgC,SAAX,CAA1C;;QAEI,CAACL,KAAL,EAAY;YACJ,IAAIM,KAAJ,CAAW,kBAAiBD,SAAU,EAAtC,CAAN;;;WAGKL,MAAMO,IAAN,GAAaL,MAAb,GAAsBF,MAAMD,KAAnC;GAPK,EAQJG,MARI,CAAP;;;;;;;AAeF,AAAe,SAASM,MAAT,CAAmBC,MAAnB,EAAsC;SAC5CC,qBAAqBD,MAArB,EAA6BT,KAA7B,CAAP;;;;;;"}