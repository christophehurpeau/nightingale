{"version":3,"file":"index-browser.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import ansi from 'ansi-styles';\nimport { styleToHexColor, formatRecordToString } from 'nightingale-formatter';\nimport type { Styles, LogRecord, Metadata } from 'nightingale-types';\n\nexport type { Styles } from 'nightingale-types';\n\ninterface CodePair {\n  open: string;\n  close: string;\n}\n\ntype AnsiStyles = Record<string, CodePair | undefined>;\n\nconst ansiStyles: AnsiStyles = {\n  black: ansi.black,\n  red: ansi.red,\n  green: ansi.green,\n  yellow: ansi.yellow,\n  blue: ansi.blue,\n  magenta: ansi.magenta,\n  cyan: ansi.cyan,\n  white: ansi.white,\n  gray: ansi.gray,\n\n  bgBlack: ansi.bgBlack,\n  bgRed: ansi.bgRed,\n  bgGreen: ansi.bgGreen,\n  bgYellow: ansi.bgYellow,\n  bgBlue: ansi.bgBlue,\n  bgMagenta: ansi.bgMagenta,\n  bgCyan: ansi.bgCyan,\n  bgWhite: ansi.bgWhite,\n\n  bold: ansi.bold,\n  underline: ansi.underline,\n\n  // http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n  orange: {\n    open: ansi.color.ansi256.hex(styleToHexColor.orange),\n    close: ansi.color.close,\n  },\n  'gray-light': {\n    open: ansi.color.ansi256.hex(styleToHexColor['gray-light']),\n    close: ansi.color.close,\n  },\n};\n\nexport function style(styles: Styles, string: string): string {\n  if (!styles || styles.length === 0 || !string) {\n    return string;\n  }\n\n  // eslint-disable-next-line unicorn/no-array-reduce\n  return styles.reduce((styledString: string, styleName: string) => {\n    const codePair: CodePair | undefined = ansiStyles[styleName];\n\n    if (!codePair) {\n      throw new Error(`Unknown style: ${styleName}`);\n    }\n\n    return codePair.open + styledString + codePair.close;\n  }, string);\n}\n\n/**\n * @param {Object} record\n * @returns {string}\n */\nexport default function ansiFormat<T extends Metadata>(\n  record: LogRecord<T>,\n): string {\n  return formatRecordToString(record, style);\n}\n"],"names":["ansiStyles","black","ansi","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bold","underline","orange","open","color","ansi256","hex","styleToHexColor","close","style","styles","string","length","reduce","styledString","styleName","codePair","Error","ansiFormat","record","formatRecordToString"],"mappings":";;;;;;;;;;;AAaA,IAAMA,UAAsB,GAAG;AAC7BC,EAAAA,KAAK,EAAEC,aAAI,CAACD,KADiB;AAE7BE,EAAAA,GAAG,EAAED,aAAI,CAACC,GAFmB;AAG7BC,EAAAA,KAAK,EAAEF,aAAI,CAACE,KAHiB;AAI7BC,EAAAA,MAAM,EAAEH,aAAI,CAACG,MAJgB;AAK7BC,EAAAA,IAAI,EAAEJ,aAAI,CAACI,IALkB;AAM7BC,EAAAA,OAAO,EAAEL,aAAI,CAACK,OANe;AAO7BC,EAAAA,IAAI,EAAEN,aAAI,CAACM,IAPkB;AAQ7BC,EAAAA,KAAK,EAAEP,aAAI,CAACO,KARiB;AAS7BC,EAAAA,IAAI,EAAER,aAAI,CAACQ,IATkB;AAW7BC,EAAAA,OAAO,EAAET,aAAI,CAACS,OAXe;AAY7BC,EAAAA,KAAK,EAAEV,aAAI,CAACU,KAZiB;AAa7BC,EAAAA,OAAO,EAAEX,aAAI,CAACW,OAbe;AAc7BC,EAAAA,QAAQ,EAAEZ,aAAI,CAACY,QAdc;AAe7BC,EAAAA,MAAM,EAAEb,aAAI,CAACa,MAfgB;AAgB7BC,EAAAA,SAAS,EAAEd,aAAI,CAACc,SAhBa;AAiB7BC,EAAAA,MAAM,EAAEf,aAAI,CAACe,MAjBgB;AAkB7BC,EAAAA,OAAO,EAAEhB,aAAI,CAACgB,OAlBe;AAoB7BC,EAAAA,IAAI,EAAEjB,aAAI,CAACiB,IApBkB;AAqB7BC,EAAAA,SAAS,EAAElB,aAAI,CAACkB,SArBa;AAuB7B;AACAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAEpB,aAAI,CAACqB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBC,oCAAe,CAACL,MAAvC,CADA;AAENM,IAAAA,KAAK,EAAEzB,aAAI,CAACqB,KAAL,CAAWI;AAFZ,GAxBqB;AA4B7B,gBAAc;AACZL,IAAAA,IAAI,EAAEpB,aAAI,CAACqB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBC,oCAAe,CAAC,YAAD,CAAtC,CADM;AAEZC,IAAAA,KAAK,EAAEzB,aAAI,CAACqB,KAAL,CAAWI;AAFN;AA5Be,CAA/B;AAkCO,SAASC,KAAT,CAAeC,MAAf,EAA+BC,MAA/B,EAAuD;AAC5D,MAAI,CAACD,MAAD,IAAWA,MAAM,CAACE,MAAP,KAAkB,CAA7B,IAAkC,CAACD,MAAvC,EAA+C;AAC7C,WAAOA,MAAP;AACD,GAH2D;;;AAM5D,SAAOD,MAAM,CAACG,MAAP,CAAc,UAACC,YAAD,EAAuBC,SAAvB,EAA6C;AAChE,QAAMC,QAA8B,GAAGnC,UAAU,CAACkC,SAAD,CAAjD;;AAEA,QAAI,CAACC,QAAL,EAAe;AACb,YAAM,IAAIC,KAAJ,qBAA4BF,SAA5B,CAAN;AACD;;AAED,WAAOC,QAAQ,CAACb,IAAT,GAAgBW,YAAhB,GAA+BE,QAAQ,CAACR,KAA/C;AACD,GARM,EAQJG,MARI,CAAP;AASD;AAED;AACA;AACA;AACA;;AACe,SAASO,UAAT,CACbC,MADa,EAEL;AACR,SAAOC,yCAAoB,CAACD,MAAD,EAASV,KAAT,CAA3B;AACD;;;;;"}