{"version":3,"file":"index-browser.es.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport * as util from 'node:util';\nimport { POB_TARGET } from 'pob-babel';\nimport { Level } from 'nightingale-levels';\nimport type {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  LogRecord,\n} from 'nightingale-types';\n\nexport { Level } from 'nightingale-levels';\n\nexport interface Options<T extends Metadata> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\nexport interface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nexport interface Config {\n  handler?: Handler;\n  handlers?: Handler[];\n  key?: string;\n  keys?: string[];\n  pattern?: RegExp;\n  processor?: Processor;\n  processors?: Processor[];\n  stop?: boolean;\n}\n\ndeclare global {\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_CONFIG: Config[];\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_LOGGER_MAP_CACHE: Map<string, ComputedConfigForKey>;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_CONFIG_DEFAULT: ComputedConfigForKey;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_GLOBAL_HANDLERS: unknown;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_GET_CONFIG_FOR_LOGGER: (\n    key: string,\n  ) => ComputedConfigForKey;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD: (\n    key: string,\n    level: number,\n  ) => ComputedConfigForKey;\n}\n\nconst globalOrWindow: typeof global =\n  typeof global !== 'undefined' ? global : (window as typeof global);\n\nif (!globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER =\n    (): ComputedConfigForKey => ({\n      handlers: [],\n      processors: [],\n    });\n}\n\nif (!globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: Level,\n  ): ComputedConfigForKey => {\n    const { handlers, processors }: ComputedConfigForKey =\n      globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(\n    key,\n    recordLevel,\n  );\n}\n\nfunction isError(messageOrError: Error | string): messageOrError is Error {\n  return messageOrError instanceof Error;\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport class Logger {\n  private contextObject?: Record<string, unknown>;\n\n  readonly key: string;\n\n  readonly displayName?: string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (process.env.NODE_ENV !== 'production' && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported, use \\`:\\` instead (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  protected getHandlersAndProcessors(\n    recordLevel: number,\n  ): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): Readonly<ComputedConfigForKey> {\n    return globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * ```typescript\n   * const loggerMyService = new Logger('app:myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.enter(someAction);\n   *     // do stuff\n   *     logger.info('info');\n   *     // do stuff\n   *     logger.exit(someAction);\n   * }\n   * ```\n   *\n   */\n  context(context: Record<string, unknown>): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  getContextObject(): Readonly<Record<string, unknown>> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Record<string, unknown>): void {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Record<string, unknown>): void {\n    if (this.contextObject === undefined) {\n      throw new Error(\n        'Cannot extends context that does not exists. Use setContext(context) first.',\n      );\n    }\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<LogRecord<T>>): void {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => {\n        process(record, record.context);\n      });\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    level: Level = Level.INFO,\n    options?: Options<T>,\n  ): void {\n    const isMessageError = isError(messageOrError);\n\n    const message = isMessageError\n      ? `${messageOrError.name}: ${messageOrError.message}`\n      : messageOrError;\n\n    const extendedMetadata =\n      isMessageError &&\n      !(metadata && Object.prototype.hasOwnProperty.call(metadata, 'error'))\n        ? { ...metadata, error: messageOrError }\n        : metadata;\n\n    const context = extendedMetadata?.context;\n    if (extendedMetadata) {\n      delete extendedMetadata.context;\n    }\n\n    const record: LogRecord<NonNullable<typeof extendedMetadata>> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata: extendedMetadata as NonNullable<typeof extendedMetadata>,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   * }\n   * ```\n   */\n  error<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   *   process.exit(1);\n   * }\n   */\n  fatal<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(\n    value: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      const inspectedValue = util.inspect(value, { depth: 6 });\n      this.log(inspectedValue, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      const inspectedValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${inspectedValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoFail(messageOrError, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(\n    messageOrError: Error | string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ): void {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata = {\n      ...metadata,\n      readableTime,\n      timeMs: diffTime,\n    };\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * ```typescript\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   * ```\n   *\n   */\n  enter<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<ExtendedFunctionNameMetadata & T>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('enter', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   * ```\n   */\n  exit<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<ExtendedFunctionNameMetadata & T>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  wrap<Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    metadataStyles: MetadataStyles<T>,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    option1: T | (() => void),\n    option2?: MetadataStyles<T> | (() => void),\n    callback?: () => void,\n  ): void {\n    let metadata: T | undefined;\n    let metadataStyles: MetadataStyles<T> | undefined;\n\n    if (typeof option1 === 'function') {\n      callback = option1;\n    } else {\n      metadata = option1;\n\n      if (typeof option2 === 'function') {\n        callback = option2;\n      } else {\n        metadataStyles = option2;\n      }\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    (callback as () => void)();\n    this.exit(fn);\n  }\n}\n"],"names":["globalOrWindow","global","window","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","_globalOrWindow$__NIG","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","isError","messageOrError","Error","Logger","displayName","process","env","NODE_ENV","includes","_proto","prototype","getHandlersAndProcessors","getConfig","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","contextObject","extendsContext","extendedContext","undefined","Object","assign","addRecord","record","_this$getHandlersAndP","length","Level","ERROR","console","log","message","forEach","some","handle","metadata","options","INFO","isMessageError","name","extendedMetadata","hasOwnProperty","call","_extends","error","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","inspectVar","success","infoSuccess","symbol","styles","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","seconds","diffTime","readableTime","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","option1","option2","callback"],"mappings":"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"}