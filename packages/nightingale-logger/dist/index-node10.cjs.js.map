{"version":3,"file":"index-node10.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { PRODUCTION, POB_TARGET } from 'pob-babel';\nimport * as util from 'util';\nimport Level from 'nightingale-levels';\nimport {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  LogRecord,\n} from 'nightingale-types';\n\ndeclare const global: any;\n\nexport { Level };\n\nexport interface Options<T> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedErrorMetadata {\n  error: Error;\n}\n\ninterface ExtendedTimeMetadata {\n  readableTime: string;\n  timeMs: number;\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = (): ComputedConfigForKey => ({\n    handlers: [],\n    processors: [],\n  });\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const {\n      handlers,\n      processors,\n    }: ComputedConfigForKey = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  private contextObject?: object;\n\n  public readonly key: string;\n\n  public readonly displayName?: string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  public constructor(key: string, displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (!PRODUCTION && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  protected getHandlersAndProcessors(\n    recordLevel: number,\n  ): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  public getConfig(): Readonly<ComputedConfigForKey> {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key, Level.ALL);\n  }\n\n  /**\n   * Create a child logger\n   */\n  public child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.info('starting');\n   *     // do stuff\n   *     logger.info('done');\n   * }\n   *\n   */\n  public context(context: object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  public getContextObject(): Readonly<object> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  public setContext(context: object): void {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  public extendsContext(extendedContext: Record<string, any>): void {\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  public addRecord<T extends Metadata>(record: Readonly<LogRecord<T>>): void {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => process(record, record.context));\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  public log<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    level: number = Level.INFO,\n    options?: Options<T>,\n  ): void {\n    const context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    const record: LogRecord<T> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  public trace<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  public debug<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  public notice<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  public info<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  public warn<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  public error<T extends Metadata>(\n    message: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (message instanceof Error) {\n      const extendedMetadata: T & ExtendedErrorMetadata = Object.assign(\n        {},\n        metadata,\n        {\n          error: message,\n        },\n      );\n      message = `${extendedMetadata.error.name}: ${\n        extendedMetadata.error.message\n      }`;\n      this.log(message, extendedMetadata, Level.ERROR, { metadataStyles });\n    } else {\n      this.log(message, metadata, Level.ERROR, { metadataStyles });\n    }\n  }\n\n  /**\n   * Log an critical message\n   */\n  public critical<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  public fatal<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  public alert<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  public inspectValue<T extends Metadata>(\n    value: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  public inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${varValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  public success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  public infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  public debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  public fail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  public infoFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  public debugFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  public time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  public infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  public timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ): void {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata: T & ExtendedTimeMetadata = Object.assign(\n      {},\n      metadata,\n      {\n        readableTime,\n        timeMs: diffTime,\n      },\n    );\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  public infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  public infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  public enter<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & { functionName?: string }>,\n  ): void {\n    const extendedMetadata: T & ExtendedFunctionNameMetadata = Object.assign(\n      {},\n      metadata,\n      { functionName: fn.name },\n    );\n    this.log('enter', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  public exit<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & { functionName?: string }>,\n  ): void {\n    const extendedMetadata: T & ExtendedFunctionNameMetadata = Object.assign(\n      {},\n      metadata,\n      { functionName: fn.name },\n    );\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  public wrap<T extends Metadata>(\n    fn: Function,\n    metadata?: T | Function,\n    metadataStyles?: MetadataStyles<T> | Function,\n    callback?: Function,\n  ): void {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles as MetadataStyles<T>);\n    (callback as Function)();\n    this.exit(fn);\n  }\n}\n"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","constructor","displayName","getHandlersAndProcessors","getConfig","Level","ALL","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","contextObject","extendsContext","extendedContext","Object","assign","addRecord","record","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","error","Error","extendedMetadata","name","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","value","util","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback","undefined"],"mappings":"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"}