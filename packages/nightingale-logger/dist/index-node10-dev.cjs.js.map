{"version":3,"file":"index-node10-dev.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { PRODUCTION, POB_TARGET } from 'pob-babel';\nimport * as util from 'util';\nimport Level from 'nightingale-levels';\nimport {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  LogRecord,\n} from 'nightingale-types';\n\ndeclare const global: any;\n\nexport { Level };\n\nexport interface Options<T> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedErrorMetadata {\n  error: Error;\n}\n\ninterface ExtendedTimeMetadata {\n  readableTime: string;\n  timeMs: number;\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = (): ComputedConfigForKey => ({\n    handlers: [],\n    processors: [],\n  });\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const {\n      handlers,\n      processors,\n    }: ComputedConfigForKey = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  private contextObject?: object;\n\n  readonly key: string;\n\n  readonly displayName?: string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (!PRODUCTION && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  protected getHandlersAndProcessors(\n    recordLevel: number,\n  ): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): Readonly<ComputedConfigForKey> {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key, Level.ALL);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.info('starting');\n   *     // do stuff\n   *     logger.info('done');\n   * }\n   *\n   */\n  context(context: object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  getContextObject(): Readonly<object> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: object): void {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Record<string, any>): void {\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<LogRecord<T>>): void {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => process(record, record.context));\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    level: number = Level.INFO,\n    options?: Options<T>,\n  ): void {\n    const context = metadata?.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    const record: LogRecord<T> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error<T extends Metadata>(\n    message: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (message instanceof Error) {\n      const extendedMetadata: T & ExtendedErrorMetadata = {\n        ...metadata,\n        error: message,\n      };\n      message = `${extendedMetadata.error.name}: ${extendedMetadata.error.message}`;\n      this.log(message, extendedMetadata, Level.ERROR, { metadataStyles });\n    } else {\n      this.log(message, metadata, Level.ERROR, { metadataStyles });\n    }\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(\n    value: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${varValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ): void {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata: T & ExtendedTimeMetadata = {\n      ...metadata,\n      readableTime,\n      timeMs: diffTime,\n    };\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & { functionName?: string }>,\n  ): void {\n    const extendedMetadata: T & ExtendedFunctionNameMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('enter', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & { functionName?: string }>,\n  ): void {\n    const extendedMetadata: T & ExtendedFunctionNameMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap<T extends Metadata>(\n    fn: Function,\n    metadata?: T | Function,\n    metadataStyles?: MetadataStyles<T> | Function,\n    callback?: Function,\n  ): void {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles as MetadataStyles<T>);\n    (callback as Function)();\n    this.exit(fn);\n  }\n}\n"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","constructor","displayName","includes","Error","getHandlersAndProcessors","getConfig","Level","ALL","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","contextObject","extendsContext","extendedContext","Object","assign","addRecord","record","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","error","extendedMetadata","name","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","value","util","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback","undefined"],"mappings":"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"}