{"version":3,"file":"index-browser.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport * as util from 'util';\nimport { Level } from 'nightingale-levels';\nimport type {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  LogRecord,\n} from 'nightingale-types';\nimport 'pob-babel';\n\nexport { Level } from 'nightingale-levels';\n\nexport interface Options<T extends Metadata> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nexport interface Config {\n  handler?: Handler;\n  handlers?: Handler[];\n  key?: string;\n  keys?: string[];\n  pattern?: RegExp;\n  processor?: Processor;\n  processors?: Processor[];\n  stop?: boolean;\n}\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface Global {\n      __NIGHTINGALE_CONFIG: Config[];\n      __NIGHTINGALE_LOGGER_MAP_CACHE: Map<string, ComputedConfigForKey>;\n      __NIGHTINGALE_CONFIG_DEFAULT: ComputedConfigForKey;\n      __NIGHTINGALE_GLOBAL_HANDLERS: unknown;\n      __NIGHTINGALE_GET_CONFIG_FOR_LOGGER: (\n        key: string,\n      ) => ComputedConfigForKey;\n      __NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD: (\n        key: string,\n        level: number,\n      ) => ComputedConfigForKey;\n    }\n  }\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = (): ComputedConfigForKey => ({\n    handlers: [],\n    processors: [],\n  });\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const { handlers, processors }: ComputedConfigForKey =\n      global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\nfunction isError(messageOrError: Error | string): messageOrError is Error {\n  return messageOrError instanceof Error;\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport class Logger {\n  private contextObject?: Record<string, unknown>;\n\n  readonly key: string;\n\n  readonly displayName?: string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (__DEV__ && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported, use \\`:\\` instead (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  protected getHandlersAndProcessors(\n    recordLevel: number,\n  ): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): Readonly<ComputedConfigForKey> {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * ```typescript\n   * const loggerMyService = new Logger('app:myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.enter(someAction);\n   *     // do stuff\n   *     logger.info('info');\n   *     // do stuff\n   *     logger.exit(someAction);\n   * }\n   * ```\n   *\n   */\n  context(context: Record<string, unknown>): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  getContextObject(): Readonly<Record<string, unknown>> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Record<string, unknown>): void {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Record<string, unknown>): void {\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<LogRecord<T>>): void {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => {\n        process(record, record.context);\n      });\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    level: Level = Level.INFO,\n    options?: Options<T>,\n  ): void {\n    const isMessageError = isError(messageOrError);\n\n    const message = isMessageError\n      ? `${messageOrError.name}: ${messageOrError.message}`\n      : messageOrError;\n\n    const extendedMetadata =\n      isMessageError &&\n      // eslint-disable-next-line unicorn/prefer-object-has-own -- TODO fix and add polyfill\n      !(metadata && Object.prototype.hasOwnProperty.call(metadata, 'error'))\n        ? { ...metadata, error: messageOrError }\n        : metadata;\n\n    const context = extendedMetadata?.context;\n    if (extendedMetadata) {\n      delete extendedMetadata.context;\n    }\n\n    const record: LogRecord<NonNullable<typeof extendedMetadata>> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata: extendedMetadata as NonNullable<typeof extendedMetadata>,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   * }\n   * ```\n   */\n  error<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   *   process.exit(1);\n   * }\n   */\n  fatal<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(\n    value: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (__POB_TARGET__ === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      const inspectedValue = util.inspect(value, { depth: 6 });\n      this.log(inspectedValue, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (__POB_TARGET__ === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      const inspectedValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${inspectedValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoFail(messageOrError, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ): void {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata = {\n      ...metadata,\n      readableTime,\n      timeMs: diffTime,\n    };\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * ```typescript\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   * ```\n   *\n   */\n  enter<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & ExtendedFunctionNameMetadata>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('enter', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   * ```\n   */\n  exit<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & ExtendedFunctionNameMetadata>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  wrap<Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    metadataStyles: MetadataStyles<T>,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    option1: T | (() => void),\n    option2?: MetadataStyles<T> | (() => void),\n    callback?: () => void,\n  ): void {\n    let metadata: T | undefined;\n    let metadataStyles: MetadataStyles<T> | undefined;\n\n    if (typeof option1 === 'function') {\n      callback = option1;\n    } else {\n      metadata = option1;\n\n      if (typeof option2 === 'function') {\n        callback = option2;\n      } else {\n        metadataStyles = option2;\n      }\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    (callback as () => void)();\n    this.exit(fn);\n  }\n}\n"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","isError","messageOrError","Error","Logger","displayName","__DEV__","includes","getHandlersAndProcessors","getConfig","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","contextObject","extendsContext","extendedContext","Object","assign","addRecord","record","length","Level","ERROR","console","log","message","forEach","process","some","handle","metadata","options","INFO","isMessageError","name","extendedMetadata","prototype","hasOwnProperty","call","error","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","inspectVar","success","infoSuccess","symbol","styles","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","option1","option2","callback"],"mappings":"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"}