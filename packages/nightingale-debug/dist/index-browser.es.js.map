{"version":3,"file":"index-browser.es.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { Level } from 'nightingale-levels';\n\nconst specialRegexpChars = /[$()+.?[\\\\\\]^{|}]/;\n\ntype TestFunction = (string: string) => boolean;\nexport type DebugValueType = RegExp | string[] | string;\n\nconst createTestFunctionFromRegexp =\n  (regexp: RegExp): TestFunction =>\n  (string: string) =>\n    regexp.test(string);\n\nconst createTestFunctionFromRegexpString = (value: string): TestFunction => {\n  if (!value.endsWith('/')) throw new Error('Invalid RegExp DEBUG value');\n  return createTestFunctionFromRegexp(new RegExp(value.slice(1, -1)));\n};\n\nconst createTestFunctionFromValue = (value: string): TestFunction => {\n  if (value.endsWith(':*')) {\n    value = value.slice(0, -2);\n    return (string: string) => string.startsWith(value);\n  }\n\n  return (string: string) => string === value;\n};\n\nexport type FindDebugLevel = (minLevel: Level, key: string) => Level;\n\nexport function createFindDebugLevel(\n  debugValue?: DebugValueType,\n): FindDebugLevel {\n  let isWildcard = false;\n  const debugValues: TestFunction[] = [];\n  const skips: TestFunction[] = [];\n\n  if (!Array.isArray(debugValue)) {\n    if (debugValue instanceof RegExp) {\n      debugValues.push(createTestFunctionFromRegexp(debugValue));\n      debugValue = undefined;\n    } else if (debugValue) {\n      debugValue = debugValue.trim();\n\n      if (debugValue.startsWith('/')) {\n        debugValues.push(createTestFunctionFromRegexpString(debugValue));\n        debugValue = undefined;\n      } else {\n        debugValue = debugValue.split(/[\\s,]+/);\n      }\n    }\n  }\n\n  if (debugValue) {\n    (debugValue as string[]).forEach((value) => {\n      if (specialRegexpChars.test(value)) {\n        throw new Error(\n          `Invalid debug value: \"${value}\" (contains special chars)`,\n        );\n      }\n\n      if (!value) return;\n\n      if (value === '*') {\n        isWildcard = true;\n        return;\n      }\n\n      if (value.startsWith('-')) {\n        skips.push(createTestFunctionFromValue(value.slice(1)));\n      } else if (!isWildcard) {\n        debugValues.push(createTestFunctionFromValue(value));\n      }\n    });\n  }\n\n  if (isWildcard) {\n    if (skips.length === 0) {\n      return () => Level.ALL;\n    } else {\n      return (minLevel: Level, key: string) =>\n        skips.some((skip) => skip(key)) ? minLevel : Level.ALL;\n    }\n  }\n\n  if (debugValues.length === 0) {\n    return (minLevel: Level) => minLevel;\n  }\n\n  return (minLevel: Level, key: string) => {\n    if (minLevel === Level.ALL || !key) {\n      return minLevel;\n    }\n\n    if (debugValues.some((dv) => dv(key))) {\n      return skips.some((skip) => skip(key)) ? minLevel : Level.ALL;\n    }\n\n    return minLevel;\n  };\n}\n"],"names":["specialRegexpChars","createTestFunctionFromRegexp","regexp","string","test","createTestFunctionFromRegexpString","value","endsWith","Error","RegExp","slice","createTestFunctionFromValue","startsWith","createFindDebugLevel","debugValue","isWildcard","debugValues","skips","Array","isArray","push","undefined","trim","split","forEach","length","Level","ALL","minLevel","key","some","skip","dv"],"mappings":";;AAAA;AAGA,IAAMA,kBAAkB,GAAG,mBAAmB,CAAA;AAK9C,IAAMC,4BAA4B,GAChC,SADIA,4BAA4BA,CAC/BC,MAAc,EAAA;AAAA,EAAA,OACf,UAACC,MAAc,EAAA;AAAA,IAAA,OACbD,MAAM,CAACE,IAAI,CAACD,MAAM,CAAC,CAAA;AAAA,GAAA,CAAA;AAAA,CAAA,CAAA;AAEvB,IAAME,kCAAkC,GAAG,SAArCA,kCAAkCA,CAAIC,KAAa,EAAmB;AAC1E,EAAA,IAAI,CAACA,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC,CAAA;AACvE,EAAA,OAAOP,4BAA4B,CAAC,IAAIQ,MAAM,CAACH,KAAK,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACrE,CAAC,CAAA;AAED,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAAIL,KAAa,EAAmB;AACnE,EAAA,IAAIA,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;IACxBD,KAAK,GAAGA,KAAK,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAC1B,IAAA,OAAO,UAACP,MAAc,EAAA;AAAA,MAAA,OAAKA,MAAM,CAACS,UAAU,CAACN,KAAK,CAAC,CAAA;AAAA,KAAA,CAAA;AACrD,GAAA;AAEA,EAAA,OAAO,UAACH,MAAc,EAAA;IAAA,OAAKA,MAAM,KAAKG,KAAK,CAAA;AAAA,GAAA,CAAA;AAC7C,CAAC,CAAA;AAIM,SAASO,oBAAoBA,CAClCC,UAA2B,EACX;EAChB,IAAIC,UAAU,GAAG,KAAK,CAAA;EACtB,IAAMC,WAA2B,GAAG,EAAE,CAAA;EACtC,IAAMC,KAAqB,GAAG,EAAE,CAAA;AAEhC,EAAA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,UAAU,CAAC,EAAE;IAC9B,IAAIA,UAAU,YAAYL,MAAM,EAAE;AAChCO,MAAAA,WAAW,CAACI,IAAI,CAACnB,4BAA4B,CAACa,UAAU,CAAC,CAAC,CAAA;AAC1DA,MAAAA,UAAU,GAAGO,SAAS,CAAA;KACvB,MAAM,IAAIP,UAAU,EAAE;AACrBA,MAAAA,UAAU,GAAGA,UAAU,CAACQ,IAAI,EAAE,CAAA;AAE9B,MAAA,IAAIR,UAAU,CAACF,UAAU,CAAC,GAAG,CAAC,EAAE;AAC9BI,QAAAA,WAAW,CAACI,IAAI,CAACf,kCAAkC,CAACS,UAAU,CAAC,CAAC,CAAA;AAChEA,QAAAA,UAAU,GAAGO,SAAS,CAAA;AACxB,OAAC,MAAM;AACLP,QAAAA,UAAU,GAAGA,UAAU,CAACS,KAAK,CAAC,QAAQ,CAAC,CAAA;AACzC,OAAA;AACF,KAAA;AACF,GAAA;AAEA,EAAA,IAAIT,UAAU,EAAE;AACbA,IAAAA,UAAU,CAAcU,OAAO,CAAC,UAAClB,KAAK,EAAK;AAC1C,MAAA,IAAIN,kBAAkB,CAACI,IAAI,CAACE,KAAK,CAAC,EAAE;AAClC,QAAA,MAAM,IAAIE,KAAK,CACYF,yBAAAA,GAAAA,KAAK,gCAChC,CAAC,CAAA;AACH,OAAA;MAEA,IAAI,CAACA,KAAK,EAAE,OAAA;MAEZ,IAAIA,KAAK,KAAK,GAAG,EAAE;AACjBS,QAAAA,UAAU,GAAG,IAAI,CAAA;AACjB,QAAA,OAAA;AACF,OAAA;AAEA,MAAA,IAAIT,KAAK,CAACM,UAAU,CAAC,GAAG,CAAC,EAAE;AACzBK,QAAAA,KAAK,CAACG,IAAI,CAACT,2BAA2B,CAACL,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACzD,OAAC,MAAM,IAAI,CAACK,UAAU,EAAE;AACtBC,QAAAA,WAAW,CAACI,IAAI,CAACT,2BAA2B,CAACL,KAAK,CAAC,CAAC,CAAA;AACtD,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAA;AAEA,EAAA,IAAIS,UAAU,EAAE;AACd,IAAA,IAAIE,KAAK,CAACQ,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO,YAAA;QAAA,OAAMC,KAAK,CAACC,GAAG,CAAA;AAAA,OAAA,CAAA;AACxB,KAAC,MAAM;MACL,OAAO,UAACC,QAAe,EAAEC,GAAW,EAAA;AAAA,QAAA,OAClCZ,KAAK,CAACa,IAAI,CAAC,UAACC,IAAI,EAAA;UAAA,OAAKA,IAAI,CAACF,GAAG,CAAC,CAAA;AAAA,SAAA,CAAC,GAAGD,QAAQ,GAAGF,KAAK,CAACC,GAAG,CAAA;AAAA,OAAA,CAAA;AAC1D,KAAA;AACF,GAAA;AAEA,EAAA,IAAIX,WAAW,CAACS,MAAM,KAAK,CAAC,EAAE;AAC5B,IAAA,OAAO,UAACG,QAAe,EAAA;AAAA,MAAA,OAAKA,QAAQ,CAAA;AAAA,KAAA,CAAA;AACtC,GAAA;AAEA,EAAA,OAAO,UAACA,QAAe,EAAEC,GAAW,EAAK;IACvC,IAAID,QAAQ,KAAKF,KAAK,CAACC,GAAG,IAAI,CAACE,GAAG,EAAE;AAClC,MAAA,OAAOD,QAAQ,CAAA;AACjB,KAAA;AAEA,IAAA,IAAIZ,WAAW,CAACc,IAAI,CAAC,UAACE,EAAE,EAAA;MAAA,OAAKA,EAAE,CAACH,GAAG,CAAC,CAAA;AAAA,KAAA,CAAC,EAAE;AACrC,MAAA,OAAOZ,KAAK,CAACa,IAAI,CAAC,UAACC,IAAI,EAAA;QAAA,OAAKA,IAAI,CAACF,GAAG,CAAC,CAAA;AAAA,OAAA,CAAC,GAAGD,QAAQ,GAAGF,KAAK,CAACC,GAAG,CAAA;AAC/D,KAAA;AAEA,IAAA,OAAOC,QAAQ,CAAA;GAChB,CAAA;AACH;;;;"}