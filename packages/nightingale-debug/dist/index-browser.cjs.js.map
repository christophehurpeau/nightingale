{"version":3,"file":"index-browser.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { Level } from 'nightingale-levels';\n\nconst specialRegexpChars = /[$()+.?[\\\\\\]^{|}]/;\n\ntype TestFunction = (string: string) => boolean;\nexport type DebugValueType = string | RegExp | string[];\n\nconst createTestFunctionFromRegexp =\n  (regexp: RegExp): TestFunction =>\n  (string: string) =>\n    regexp.test(string);\n\nconst createTestFunctionFromRegexpString = (value: string): TestFunction => {\n  if (!value.endsWith('/')) throw new Error('Invalid RegExp DEBUG value');\n  return createTestFunctionFromRegexp(new RegExp(value.slice(1, -1)));\n};\n\nconst createTestFunctionFromValue = (value: string): TestFunction => {\n  if (value.endsWith(':*')) {\n    value = value.slice(0, -2);\n    return (string: string) => string.startsWith(value);\n  }\n\n  return (string: string) => string === value;\n};\n\nexport type FindDebugLevel = (minLevel: Level, key: string) => Level;\n\nexport function createFindDebugLevel(\n  debugValue?: DebugValueType,\n): FindDebugLevel {\n  let isWildcard = false;\n  const debugValues: TestFunction[] = [];\n  const skips: TestFunction[] = [];\n\n  if (!Array.isArray(debugValue)) {\n    if (debugValue instanceof RegExp) {\n      debugValues.push(createTestFunctionFromRegexp(debugValue));\n      debugValue = undefined;\n    } else if (debugValue) {\n      debugValue = debugValue.trim();\n\n      if (debugValue.startsWith('/')) {\n        debugValues.push(createTestFunctionFromRegexpString(debugValue));\n        debugValue = undefined;\n      } else {\n        debugValue = debugValue.split(/[\\s,]+/);\n      }\n    }\n  }\n\n  if (debugValue) {\n    (debugValue as string[]).forEach((value) => {\n      if (specialRegexpChars.test(value)) {\n        throw new Error(\n          `Invalid debug value: \"${value}\" (contains special chars)`,\n        );\n      }\n\n      if (!value) return;\n\n      if (value === '*') {\n        isWildcard = true;\n        return;\n      }\n\n      if (value.startsWith('-')) {\n        skips.push(createTestFunctionFromValue(value.slice(1)));\n      } else if (!isWildcard) {\n        debugValues.push(createTestFunctionFromValue(value));\n      }\n    });\n  }\n\n  if (isWildcard) {\n    if (skips.length === 0) {\n      return () => Level.ALL;\n    } else {\n      return (minLevel: Level, key: string) =>\n        skips.some((skip) => skip(key)) ? minLevel : Level.ALL;\n    }\n  }\n\n  if (debugValues.length === 0) {\n    return (minLevel: Level) => minLevel;\n  }\n\n  return (minLevel: Level, key: string) => {\n    if (minLevel === Level.ALL || !key) {\n      return minLevel;\n    }\n\n    if (debugValues.some((dv) => dv(key))) {\n      return skips.some((skip) => skip(key)) ? minLevel : Level.ALL;\n    }\n\n    return minLevel;\n  };\n}\n"],"names":["specialRegexpChars","createTestFunctionFromRegexp","regexp","string","test","createTestFunctionFromRegexpString","value","endsWith","Error","RegExp","slice","createTestFunctionFromValue","startsWith","createFindDebugLevel","debugValue","isWildcard","debugValues","skips","Array","isArray","push","undefined","trim","split","forEach","length","Level","ALL","minLevel","key","some","skip","dv"],"mappings":"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"}